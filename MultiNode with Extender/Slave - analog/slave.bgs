const SOFT_TIME = 16384
const READ_TIME = 16384
# ms  | SOFT_TIME
# 7.5 | 246
# 10  | 328
# 12.5| 410
# 15  | 492
# 20  | 655
# 25  | 819
# 30  | 983
# 35  | 1147
# 40  | 1311
# 45  | 1475
# 50  | 1638
# 55  | 1802
# 60  | 1966
# 65  | 2130
# 70  | 2294
# 75  | 2468
# 80  | 2621
# 85  | 2785
# 90  | 2949
# 95  | 3113
# 100 | 3277

	
#*** list of handles for soft timer ****
const UPDATE_GATT = 9
const UPDATE_GATT2 = 19
const REPEAT = 0
const DISCONNECT = 1
const CONNECTED = 2
const NUM_BYTES = 20
const CALCULATE = 23
const ADC_READ = 3
const WRITE = 4
const k() = "0123456789abcde0123456789abcde0123456789abcde0123456789abcde0123456789abcde0123456789abcde0123456789abcde0123456789abcde0123456789abcde0123456789abcde0123456789abcde0123456789abcde0123456789abcde0123456789abcde0123456789abcde0123456789abcde0123456789abcde"
# 37 not working
const SIZE = 30
const NUM_TT = 66
const MAXPACKETS = 5
dim value_data1(32)
dim u(255)# GATT server value length must be the same size as u
dim tmp(5)
dim buffer(4)
#*** list of variables ****

dim message2(16)
dim message3(16)
dim message4(16)
dim conHandle
dim handle1
dim offset1
dim result1
dim value_len1
dim value_len2
dim i
dim upointer
dim test
dim a
dim b
dim c
dim d
dim e
dim f
dim g
dim packet_count
dim count
dim milliv
dim ready
dim data(20)


procedure init_lcd()
	call hardware_io_port_write(1,$7,$1)
	call hardware_io_port_config_direction(1,$7)
	call hardware_spi_transfer(0,11,"\x30\x30\x30\x39\x14\x56\x6d\x70\x0c\x06\x01")
end

procedure write_lcd(line, message())
	call hardware_io_port_write(0,$80,$00) # RS pin
	call hardware_io_port_write(1,$40,$00) # CS pin
	call hardware_io_port_config_direction(0,$94)
	call hardware_io_port_config_direction(1,$68)
	call hardware_spi_transfer(0,10,"\x30\x30\x30\x39\x14\x56\x6d\x70\x0c\x06")	
	if line = 1 then
		call hardware_spi_transfer(0,1,"\x80")
	else
		call hardware_spi_transfer(0,1,"\xc0")
	end if
	call hardware_io_port_write(0,$80,$80)
	call hardware_spi_transfer(0,16,message(0:16))
end

event system_boot(major,minor,patch,build,ll_version,protocol,hw)    
	count = 0
	call hardware_io_port_config_direction(0, $12)
    call hardware_io_port_write(0,$10,$00)
	call init_lcd()	
	call sm_set_bondable_mode(1)
    call gap_set_adv_parameters(32, 32, 4)
	call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)

end

event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)

	call hardware_set_soft_timer(READ_TIME, ADC_READ, 0)
end


event hardware_soft_timer(handle)
	
	if handle = ADC_READ then
		call hardware_adc_read(6, 1, 2)	

	end if 

    if handle = DISCONNECT then
		call connection_disconnect(conHandle)
    end if
end

event hardware_adc_result(input, value)

	if input = 6 then
		#Convert HEX to STRING
		milliv=value
		tmp(0:1) = (milliv/10000) + (milliv / 100000*-10) + 48
		tmp(1:1) = (milliv/1000) + (milliv / 10000*-10) + 48
		tmp(2:1) = (milliv/100) + (milliv / 1000*-10) + 48
		tmp(3:1) = (milliv/10) + (milliv / 100*-10) + 48
		tmp(4:1) = (milliv) + (milliv / 10*-10) + 48
		
		message2(0:10) = "Reading:  "
		message2(10:6) = tmp(0:6)
		
		call write_lcd(1, message2(0:16))
		call attributes_write(temperatureA, 0, 5, tmp(0:5))
	
	end if
	
end

event connection_disconnected(connection, reason)
	call hardware_set_soft_timer(SOFT_TIME, DISCONNECT, 1)
	call hardware_io_port_write(0,$10,$00)
	call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
end



